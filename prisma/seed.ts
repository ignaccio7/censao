// oxlint-disable no-await-in-loop
// oxlint-disable id-length
// oxlint-disable no-magic-numbers
// oxlint-disable no-console
// oxlint-disable func-style
import { PrismaClient } from '@prisma/client'
import { hash } from 'bcryptjs'

const prisma = new PrismaClient()

const SALT_ROUNDS = 12

// ========================================
// DEFINICI√ìN DE USUARIOS/ROLES SIMPLIFICADOS
// ========================================

interface PermisoCompleto {
  nombre: string
  tipo: 'frontend' | 'backend'
  ruta: string
  metodos: string[]
  icono?: string
  descripcion: string
  modulo: string
}

interface UsuarioCompleto {
  // Datos de persona
  persona: {
    ci: string
    nombres: string
    paterno: string
    materno?: string
    telefono: string
    correo: string
    direccion: string
  }
  // Datos de usuario
  usuario: {
    username: string
    password: string
    activo: boolean
  }
  // Datos espec√≠ficos (doctor/paciente)
  datosEspecificos?: {
    tipo: 'doctor' | 'paciente'
    matricula?: string
    nroHistoriaClinica?: string
    fechaNacimiento?: Date
    sexo?: 'M' | 'F' | 'O'
    grupoSanguineo?: string
  }
  // Rol y permisos
  rol: {
    nombre: string
    descripcion: string
    permisos: PermisoCompleto[]
  }
}

// ========================================
// PERMISOS COMUNES A TODOS LOS USUARIOS
// ========================================
const PERMISOS_COMUNES: PermisoCompleto[] = [
  {
    nombre: 'Inicio',
    tipo: 'frontend',
    ruta: '/dashboard',
    metodos: ['read'],
    icono: 'home',
    descripcion: 'Bienvenid@ a la aplicaci√≥n de Gesti√≥n de Salud',
    modulo: 'principal'
  },
  {
    nombre: 'Perfil',
    tipo: 'frontend',
    ruta: '/dashboard/perfil',
    metodos: ['read', 'update'],
    icono: 'user',
    descripcion: 'Permite ver y actualizar el perfil del usuario personal',
    modulo: 'principal'
  },
  {
    nombre: 'API Perfil',
    tipo: 'backend',
    ruta: '/api/usuarios/perfil',
    metodos: ['GET', 'PATCH'],
    descripcion: 'API para gestionar perfil de usuario',
    modulo: 'principal'
  }
]

// ========================================
// DEFINICI√ìN COMPLETA DE CADA USUARIO
// ========================================

// üè• PACIENTE 1
const USUARIO_PACIENTE_1: UsuarioCompleto = {
  persona: {
    ci: '12345678',
    nombres: 'Ana Sof√≠a',
    paterno: 'Rojas',
    materno: 'Torres',
    telefono: '70123456',
    correo: 'paciente1@censao.com',
    direccion: 'Centro, La Paz'
  },
  usuario: {
    username: 'paciente1',
    password: '123',
    activo: true
  },
  datosEspecificos: {
    tipo: 'paciente',
    nroHistoriaClinica: 'HC-2025-001',
    fechaNacimiento: new Date('1990-05-15'),
    sexo: 'F',
    grupoSanguineo: 'O+'
  },
  rol: {
    nombre: 'PACIENTE',
    descripcion: 'Usuario paciente del sistema',
    permisos: [
      ...PERMISOS_COMUNES,
      // FRONTEND - Permisos espec√≠ficos del paciente
      {
        nombre: 'Mis Tratamientos',
        tipo: 'frontend',
        ruta: '/dashboard/paciente/tratamientos',
        metodos: ['read'],
        icono: 'history',
        descripcion: 'Ver mis tratamientos m√©dicos',
        modulo: 'mi_salud'
      },
      {
        nombre: 'Detalle Tratamiento',
        tipo: 'frontend',
        ruta: '/dashboard/paciente/tratamientos/:uuid',
        metodos: ['read'],
        icono: 'history',
        descripcion: 'Ver detalle de un tratamiento espec√≠fico',
        modulo: 'mi_salud'
      },
      {
        nombre: 'Mis Citas',
        tipo: 'frontend',
        ruta: '/dashboard/paciente/citas',
        metodos: ['read'],
        icono: 'calendar',
        descripcion: 'Ver mis citas m√©dicas programadas',
        modulo: 'mi_salud'
      },
      // BACKEND - APIs espec√≠ficas del paciente
      {
        nombre: 'API Mis Tratamientos',
        tipo: 'backend',
        ruta: '/api/paciente/:uuid/tratamientos',
        metodos: ['GET'],
        descripcion: 'API para ver tratamientos del paciente',
        modulo: 'mi_salud'
      },
      {
        nombre: 'API Detalle Tratamiento',
        tipo: 'backend',
        ruta: '/api/paciente/:uuid/tratamientos/:uuid',
        metodos: ['GET'],
        descripcion: 'API para ver detalle de tratamiento',
        modulo: 'mi_salud'
      },
      {
        nombre: 'API Mis Citas',
        tipo: 'backend',
        ruta: '/api/paciente/:uuid/citas',
        metodos: ['GET'],
        descripcion: 'API para ver citas del paciente',
        modulo: 'mi_salud'
      }
    ]
  }
}

// üè• PACIENTE 2
const USUARIO_PACIENTE_2: UsuarioCompleto = {
  persona: {
    ci: '98765432',
    nombres: 'Juan Carlos',
    paterno: 'Mamani',
    materno: 'Quispe',
    telefono: '70987654',
    correo: 'paciente2@censao.com',
    direccion: 'El Alto, La Paz'
  },
  usuario: {
    username: 'paciente2',
    password: '123',
    activo: true
  },
  datosEspecificos: {
    tipo: 'paciente',
    nroHistoriaClinica: 'HC-2025-002',
    fechaNacimiento: new Date('1985-10-22'),
    sexo: 'M',
    grupoSanguineo: 'A+'
  },
  rol: {
    nombre: 'PACIENTE', // Mismo rol que PACIENTE_1
    descripcion: 'Usuario paciente del sistema',
    permisos: [] // Se reutilizar√° el rol ya creado
  }
}

// üë©‚Äç‚öïÔ∏è DOCTOR ESPECIALIZADO EN FICHAS
const USUARIO_DOCTOR_FICHAS: UsuarioCompleto = {
  persona: {
    ci: '87654321',
    nombres: 'Dr. Maria',
    paterno: 'Villalobos',
    materno: 'Quispe',
    telefono: '70987654',
    correo: 'doctor.fichas@censao.com',
    direccion: 'Zona Sur, La Paz'
  },
  usuario: {
    username: 'doctor.fichas',
    password: '123',
    activo: true
  },
  datosEspecificos: {
    tipo: 'doctor',
    matricula: 'MED-002-2025'
  },
  rol: {
    nombre: 'DOCTOR_FICHAS',
    descripcion: 'Doctor especializado en fichas m√©dicas',
    permisos: [
      ...PERMISOS_COMUNES,
      // FRONTEND - Solo fichas
      {
        nombre: 'Gestionar Fichas',
        tipo: 'frontend',
        ruta: '/dashboard/fichas',
        metodos: ['read', 'create', 'update', 'delete'],
        icono: 'plus',
        descripcion: 'Gesti√≥n completa de fichas m√©dicas',
        modulo: 'fichas'
      },
      // BACKEND - Solo fichas
      {
        nombre: 'API Fichas',
        tipo: 'backend',
        ruta: '/api/fichas',
        metodos: ['GET', 'POST', 'PATCH', 'DELETE'],
        descripcion: 'API para gesti√≥n completa de fichas',
        modulo: 'fichas'
      }
    ]
  }
}

// üë®‚Äç‚öïÔ∏è DOCTOR GENERAL
const USUARIO_DOCTOR_GENERAL: UsuarioCompleto = {
  persona: {
    ci: '11111111',
    nombres: 'Dr. Carlos',
    paterno: 'Mendoza',
    materno: 'Silva',
    telefono: '70111111',
    correo: 'doctor.general@censao.com',
    direccion: 'Miraflores, La Paz'
  },
  usuario: {
    username: 'doctor.general',
    password: '123',
    activo: true
  },
  datosEspecificos: {
    tipo: 'doctor',
    matricula: 'MED-003-2025'
  },
  rol: {
    nombre: 'DOCTOR_GENERAL',
    descripcion: 'M√©dico general con atenci√≥n a pacientes',
    permisos: [
      ...PERMISOS_COMUNES,
      // FRONTEND - Fichas
      {
        nombre: 'Gestionar Fichas',
        tipo: 'frontend',
        ruta: '/dashboard/fichas',
        metodos: ['read', 'create', 'update', 'delete'],
        icono: 'plus',
        descripcion: 'Gesti√≥n completa de fichas m√©dicas',
        modulo: 'fichas'
      },
      // FRONTEND - Atenci√≥n m√©dica
      {
        nombre: 'Pacientes',
        tipo: 'frontend',
        ruta: '/dashboard/atencion/pacientes',
        metodos: ['read', 'update', 'create'],
        icono: 'list',
        descripcion: 'Gestionar pacientes asignados',
        modulo: 'atencion'
      },
      {
        nombre: 'Seguimiento Tratamientos',
        tipo: 'frontend',
        ruta: '/dashboard/atencion/seguimiento',
        metodos: ['read', 'update', 'delete'],
        icono: 'monitor',
        descripcion: 'Seguimiento de tratamientos m√©dicos',
        modulo: 'atencion'
      },
      {
        nombre: 'Reenviar Notificaciones',
        tipo: 'frontend',
        ruta: '/dashboard/atencion/notificaciones',
        metodos: ['read', 'create'],
        icono: 'send',
        descripcion: 'Gestionar notificaciones a pacientes',
        modulo: 'atencion'
      },
      // FRONTEND - Tratamientos (como doctor)
      {
        nombre: 'Tratamientos',
        tipo: 'frontend',
        ruta: '/dashboard/paciente/tratamientos',
        metodos: ['read', 'create', 'update', 'delete'],
        icono: 'history',
        descripcion: 'Gestionar tratamientos de pacientes',
        modulo: 'tratamientos'
      },
      {
        nombre: 'Detalle Tratamiento',
        tipo: 'frontend',
        ruta: '/dashboard/paciente/tratamientos/:uuid',
        metodos: ['read', 'update', 'delete'],
        icono: 'history',
        descripcion: 'Gestionar detalle de tratamiento',
        modulo: 'tratamientos'
      },
      {
        nombre: 'Citas',
        tipo: 'frontend',
        ruta: '/dashboard/paciente/citas',
        metodos: ['read', 'update', 'delete'],
        icono: 'calendar',
        descripcion: 'Gestionar citas m√©dicas',
        modulo: 'tratamientos'
      },

      // BACKEND - APIs
      {
        nombre: 'API Fichas',
        tipo: 'backend',
        ruta: '/api/fichas',
        metodos: ['GET', 'POST', 'PATCH', 'DELETE'],
        descripcion: 'API para gesti√≥n completa de fichas',
        modulo: 'fichas'
      },
      {
        nombre: 'API Atenci√≥n Pacientes',
        tipo: 'backend',
        ruta: '/api/atencion/:uuid/pacientes',
        metodos: ['GET'],
        descripcion: 'API para obtener pacientes asignados al doctor',
        modulo: 'atencion'
      },
      {
        nombre: 'API Tratamientos',
        tipo: 'backend',
        ruta: '/api/atencion/tratamientos',
        metodos: ['GET', 'POST'],
        descripcion: 'API para gesti√≥n de tratamientos',
        modulo: 'atencion'
      },
      {
        nombre: 'API Tratamientos Paciente',
        tipo: 'backend',
        ruta: '/api/atencion/tratamientos/paciente/:uuid',
        metodos: ['GET', 'PATCH'],
        descripcion: 'API para tratamientos espec√≠ficos de paciente',
        modulo: 'atencion'
      },
      {
        nombre: 'API Notificaciones M√©dicas',
        tipo: 'backend',
        ruta: '/api/notificaciones/medicas',
        metodos: ['POST'],
        descripcion: 'API para enviar notificaciones m√©dicas',
        modulo: 'atencion'
      },
      {
        nombre: 'API Notificaciones Espec√≠ficas',
        tipo: 'backend',
        ruta: '/api/notificaciones/medicas/:uuid',
        metodos: ['POST'],
        descripcion: 'API para notificaciones a paciente espec√≠fico',
        modulo: 'atencion'
      },
      {
        nombre: 'API Tratamientos de Paciente',
        tipo: 'backend',
        ruta: '/api/paciente/:uuid/tratamientos',
        metodos: ['GET', 'POST', 'PATCH', 'DELETE'],
        descripcion: 'API para gestionar tratamientos de pacientes',
        modulo: 'tratamientos'
      },
      {
        nombre: 'API Detalle Tratamiento Paciente',
        tipo: 'backend',
        ruta: '/api/paciente/:uuid/tratamientos/:uuid',
        metodos: ['GET', 'PATCH', 'DELETE'],
        descripcion: 'API para detalle de tratamiento espec√≠fico',
        modulo: 'tratamientos'
      },
      {
        nombre: 'API Citas de Paciente',
        tipo: 'backend',
        ruta: '/api/paciente/:uuid/citas',
        metodos: ['GET', 'PATCH', 'DELETE'],
        descripcion: 'API para gestionar citas de pacientes',
        modulo: 'tratamientos'
      }
    ]
  }
}

// ü¶∑ ODONT√ìLOGA (MISMOS PERMISOS QUE DOCTOR GENERAL)
const USUARIO_ODONTOLOGO: UsuarioCompleto = {
  persona: {
    ci: '22222222',
    nombres: 'Dra. Sofia',
    paterno: 'Rojas',
    materno: 'Mamani',
    telefono: '70222222',
    correo: 'odontologa@censao.com',
    direccion: 'Calacoto, La Paz'
  },
  usuario: {
    username: 'odontologa',
    password: '123',
    activo: true
  },
  datosEspecificos: {
    tipo: 'doctor',
    matricula: 'ODO-001-2025'
  },
  rol: {
    nombre: 'DOCTOR_GENERAL', // Mismo rol que DOCTOR_GENERAL
    descripcion: 'M√©dico general con atenci√≥n a pacientes',
    permisos: [] // Se reutilizar√° el rol ya creado
  }
}

// üë§ ADMINISTRADOR (ACCESO TOTAL)
const USUARIO_ADMIN: UsuarioCompleto = {
  persona: {
    ci: '123123123',
    nombres: 'Casto',
    paterno: 'Navia',
    materno: '',
    telefono: '77777777',
    correo: 'admin@censao.com',
    direccion: 'Centro, La Paz'
  },
  usuario: {
    username: 'admin',
    password: '123',
    activo: true
  },
  datosEspecificos: {
    tipo: 'doctor',
    matricula: 'MED-001-2025'
  },
  rol: {
    nombre: 'ADMINISTRADOR',
    descripcion: 'Administrador del sistema con acceso total',
    permisos: [
      ...PERMISOS_COMUNES,
      // ACCESO TOTAL A FICHAS
      {
        nombre: 'Gestionar Fichas',
        tipo: 'frontend',
        ruta: '/dashboard/fichas',
        metodos: ['read', 'create', 'update', 'delete'],
        icono: 'plus',
        descripcion: 'Gesti√≥n completa de fichas m√©dicas',
        modulo: 'fichas'
      },
      {
        nombre: 'API Fichas',
        tipo: 'backend',
        ruta: '/api/fichas',
        metodos: ['GET', 'POST', 'PATCH', 'DELETE'],
        descripcion: 'API para gesti√≥n completa de fichas',
        modulo: 'fichas'
      },
      // ACCESO TOTAL A ATENCI√ìN M√âDICA
      {
        nombre: 'Pacientes',
        tipo: 'frontend',
        ruta: '/dashboard/atencion/pacientes',
        metodos: ['read', 'update', 'create'],
        icono: 'list',
        descripcion: 'Gestionar todos los pacientes',
        modulo: 'atencion'
      },
      {
        nombre: 'Seguimiento Tratamientos',
        tipo: 'frontend',
        ruta: '/dashboard/atencion/seguimiento',
        metodos: ['read', 'update', 'delete'],
        icono: 'monitor',
        descripcion: 'Seguimiento de tratamientos m√©dicos',
        modulo: 'atencion'
      },
      {
        nombre: 'Reenviar Notificaciones',
        tipo: 'frontend',
        ruta: '/dashboard/atencion/notificaciones',
        metodos: ['read', 'create'],
        icono: 'send',
        descripcion: 'Gestionar notificaciones a pacientes',
        modulo: 'atencion'
      },
      {
        nombre: 'Tratamientos',
        tipo: 'frontend',
        ruta: '/dashboard/paciente/tratamientos',
        metodos: ['read', 'create', 'update', 'delete'],
        icono: 'history',
        descripcion: 'Gestionar todos los tratamientos',
        modulo: 'tratamientos'
      },
      {
        nombre: 'Detalle Tratamiento',
        tipo: 'frontend',
        ruta: '/dashboard/paciente/tratamientos/:uuid',
        metodos: ['read', 'update', 'delete'],
        icono: 'history',
        descripcion: 'Gestionar detalle de tratamientos',
        modulo: 'tratamientos'
      },
      {
        nombre: 'Citas',
        tipo: 'frontend',
        ruta: '/dashboard/paciente/citas',
        metodos: ['read', 'update', 'delete'],
        icono: 'calendar',
        descripcion: 'Gestionar todas las citas',
        modulo: 'tratamientos'
      },

      // BACKEND - APIs completas
      {
        nombre: 'API Atenci√≥n Pacientes',
        tipo: 'backend',
        ruta: '/api/atencion/:uuid/pacientes',
        metodos: ['GET'],
        descripcion: 'API para obtener todos los pacientes',
        modulo: 'atencion'
      },
      {
        nombre: 'API Tratamientos',
        tipo: 'backend',
        ruta: '/api/atencion/tratamientos',
        metodos: ['GET', 'POST'],
        descripcion: 'API para gesti√≥n completa de tratamientos',
        modulo: 'atencion'
      },
      {
        nombre: 'API Tratamientos Paciente',
        tipo: 'backend',
        ruta: '/api/atencion/tratamientos/paciente/:uuid',
        metodos: ['GET', 'PATCH'],
        descripcion: 'API para tratamientos de pacientes espec√≠ficos',
        modulo: 'atencion'
      },
      {
        nombre: 'API Notificaciones M√©dicas',
        tipo: 'backend',
        ruta: '/api/notificaciones/medicas',
        metodos: ['POST'],
        descripcion: 'API para enviar notificaciones m√©dicas',
        modulo: 'atencion'
      },
      {
        nombre: 'API Notificaciones Espec√≠ficas',
        tipo: 'backend',
        ruta: '/api/notificaciones/medicas/:uuid',
        metodos: ['POST'],
        descripcion: 'API para notificaciones a paciente espec√≠fico',
        modulo: 'atencion'
      },
      {
        nombre: 'API Tratamientos de Paciente',
        tipo: 'backend',
        ruta: '/api/paciente/:uuid/tratamientos',
        metodos: ['GET', 'POST', 'PATCH', 'DELETE'],
        descripcion: 'API para gesti√≥n total de tratamientos de pacientes',
        modulo: 'tratamientos'
      },
      {
        nombre: 'API Detalle Tratamiento Paciente',
        tipo: 'backend',
        ruta: '/api/paciente/:uuid/tratamientos/:uuid',
        metodos: ['GET', 'PATCH', 'DELETE'],
        descripcion: 'API para gesti√≥n total de detalle de tratamientos',
        modulo: 'tratamientos'
      },
      {
        nombre: 'API Citas de Paciente',
        tipo: 'backend',
        ruta: '/api/paciente/:uuid/citas',
        metodos: ['GET', 'PATCH', 'DELETE'],
        descripcion: 'API para gesti√≥n total de citas',
        modulo: 'tratamientos'
      },

      // PERMISOS ADMINISTRATIVOS B√ÅSICOS (para futuro)
      {
        nombre: 'Gesti√≥n de Usuarios',
        tipo: 'frontend',
        ruta: '/dashboard/admin/usuarios',
        metodos: ['read', 'create', 'update', 'delete'],
        icono: 'team',
        descripcion: 'Gestionar usuarios del sistema',
        modulo: 'administracion'
      },
      {
        nombre: 'API Usuarios Admin',
        tipo: 'backend',
        ruta: '/api/admin/usuarios',
        metodos: ['GET', 'POST', 'PATCH', 'DELETE'],
        descripcion: 'API para administrar usuarios',
        modulo: 'administracion'
      }
    ]
  }
}

// ========================================
// LISTA ORDENADA DE USUARIOS A CREAR
// ========================================
const USUARIOS_A_CREAR: UsuarioCompleto[] = [
  USUARIO_PACIENTE_1,
  USUARIO_PACIENTE_2,
  USUARIO_DOCTOR_FICHAS,
  USUARIO_DOCTOR_GENERAL,
  USUARIO_ODONTOLOGO,
  USUARIO_ADMIN
]

// ========================================
// FUNCIONES AUXILIARES
// ========================================

async function limpiarBaseDatos() {
  console.log('üßπ Limpiando datos existentes...')
  await prisma.usuarios_roles.deleteMany()
  await prisma.roles_permisos.deleteMany()
  await prisma.usuarios.deleteMany()
  await prisma.doctores.deleteMany()
  await prisma.pacientes.deleteMany()
  await prisma.permisos.deleteMany()
  await prisma.roles.deleteMany()
  await prisma.personas.deleteMany()
  console.log('‚úÖ Base de datos limpia')
}

async function crearUsuarioCompleto(usuarioData: UsuarioCompleto) {
  const hashedPassword = await hash(usuarioData.usuario.password, SALT_ROUNDS)

  console.log(`\nüë§ Creando usuario: ${usuarioData.usuario.username}`)

  // 1. Crear persona
  console.log(
    `  üìù Creando persona: ${usuarioData.persona.nombres} ${usuarioData.persona.paterno}`
  )
  const persona = await prisma.personas.create({
    data: {
      ci: usuarioData.persona.ci,
      nombres: usuarioData.persona.nombres,
      paterno: usuarioData.persona.paterno,
      materno: usuarioData.persona.materno || '',
      telefono: usuarioData.persona.telefono,
      correo: usuarioData.persona.correo,
      direccion: usuarioData.persona.direccion
    }
  })

  // 2. Crear usuario
  console.log(`  üîê Creando usuario: ${usuarioData.usuario.username}`)
  const usuario = await prisma.usuarios.create({
    data: {
      usuario_id: persona.id,
      username: usuarioData.usuario.username,
      password_hash: hashedPassword,
      activo: usuarioData.usuario.activo
    }
  })

  // 3. Crear datos espec√≠ficos (doctor/paciente)
  if (usuarioData.datosEspecificos) {
    if (usuarioData.datosEspecificos.tipo === 'doctor') {
      console.log(
        `  üë©‚Äç‚öïÔ∏è Creando doctor con matr√≠cula: ${usuarioData.datosEspecificos.matricula}`
      )
      await prisma.doctores.create({
        data: {
          doctor_id: persona.id,
          matricula: usuarioData.datosEspecificos.matricula!
        }
      })
    } else if (usuarioData.datosEspecificos.tipo === 'paciente') {
      console.log(
        `  üè• Creando paciente con HC: ${usuarioData.datosEspecificos.nroHistoriaClinica}`
      )
      await prisma.pacientes.create({
        data: {
          paciente_id: persona.id,
          nro_historia_clinica:
            usuarioData.datosEspecificos.nroHistoriaClinica!,
          fecha_nacimiento: usuarioData.datosEspecificos.fechaNacimiento!,
          sexo: usuarioData.datosEspecificos.sexo!,
          grupo_sanguineo: usuarioData.datosEspecificos.grupoSanguineo!
        }
      })
    }
  }

  // 4. Crear o reutilizar rol
  let rol
  const rolExistente = await prisma.roles.findUnique({
    where: { nombre: usuarioData.rol.nombre }
  })

  if (rolExistente) {
    console.log(`  üîÑ Reutilizando rol existente: ${usuarioData.rol.nombre}`)
    rol = rolExistente
  } else {
    console.log(`  üÜï Creando nuevo rol: ${usuarioData.rol.nombre}`)
    rol = await prisma.roles.create({
      data: {
        nombre: usuarioData.rol.nombre,
        descripcion: usuarioData.rol.descripcion
      }
    })

    // 5. Crear permisos del rol (solo si es nuevo)
    if (usuarioData.rol.permisos.length > 0) {
      console.log(
        `  üìã Creando ${usuarioData.rol.permisos.length} permisos para el rol`
      )

      for (const permisoData of usuarioData.rol.permisos) {
        // Verificar si el permiso ya existe
        const permisoExistente = await prisma.permisos.findFirst({
          where: {
            nombre: permisoData.nombre,
            ruta: permisoData.ruta
          }
        })

        let permiso
        if (permisoExistente) {
          permiso = permisoExistente
        } else {
          permiso = await prisma.permisos.create({
            data: {
              nombre: permisoData.nombre,
              tipo: permisoData.tipo,
              ruta: permisoData.ruta,
              metodos: permisoData.metodos,
              icono: permisoData.icono,
              descripcion: permisoData.descripcion,
              modulo: permisoData.modulo
            }
          })
        }

        // Asignar permiso al rol
        await prisma.roles_permisos.create({
          data: {
            rol_id: rol.id,
            permiso_id: permiso.id
          }
        })
      }
    }
  }

  // 6. Asignar rol al usuario
  console.log(`  üîó Asignando rol ${usuarioData.rol.nombre} al usuario`)
  await prisma.usuarios_roles.create({
    data: {
      usuario_id: persona.id,
      rol_id: rol.id,
      desde: new Date()
    }
  })

  console.log(`‚úÖ Usuario ${usuarioData.usuario.username} creado exitosamente!`)

  return {
    persona,
    usuario,
    rol
  }
}

// ========================================
// FUNCI√ìN PRINCIPAL
// ========================================
async function main() {
  console.log('üöÄ Iniciando seeding simplificado de la base de datos...')

  try {
    // 1. Limpiar base de datos
    await limpiarBaseDatos()

    // 2. Crear todos los usuarios de forma ordenada
    console.log('\nüìã Creando usuarios en orden...')

    const usuariosCreados = []
    for (const usuarioData of USUARIOS_A_CREAR) {
      const resultado = await crearUsuarioCompleto(usuarioData)
      usuariosCreados.push(resultado)
    }

    // 3. Mostrar resumen final
    console.log('\n' + '='.repeat(50))
    console.log('üéâ SEEDING SIMPLIFICADO COMPLETADO!')
    console.log('='.repeat(50))

    console.log('\nüìä RESUMEN:')
    const totalRoles = await prisma.roles.count()
    const totalPermisos = await prisma.permisos.count()
    const totalPersonas = await prisma.personas.count()
    const totalUsuarios = await prisma.usuarios.count()
    const totalDoctores = await prisma.doctores.count()
    const totalPacientes = await prisma.pacientes.count()

    console.log(`   üë• Personas creadas: ${totalPersonas}`)
    console.log(`   üîê Usuarios creados: ${totalUsuarios}`)
    console.log(`   üë©‚Äç‚öïÔ∏è Doctores creados: ${totalDoctores}`)
    console.log(`   üè• Pacientes creados: ${totalPacientes}`)
    console.log(`   üè∑Ô∏è Roles creados: ${totalRoles}`)
    console.log(`   üìã Permisos creados: ${totalPermisos}`)

    console.log('\nüîë CREDENCIALES DE ACCESO:')
    console.log('   (Todos usan la contrase√±a: "123")')
    console.log('')

    console.log('   üè• PACIENTE: username="paciente1"')
    console.log('   üè• PACIENTE: username="paciente2"')
    console.log('   üë©‚Äç‚öïÔ∏è DOCTOR FICHAS: username="doctor.fichas"')
    console.log('   üë®‚Äç‚öïÔ∏è DOCTOR GENERAL: username="doctor.general"')
    console.log('   ü¶∑ ODONT√ìLOGA: username="odontologa"')
    console.log('   üë§ ADMINISTRADOR: username="admin"')

    console.log('\nüìã PERMISOS POR ROL:')
    console.log('')
    console.log('   üè• PACIENTE:')
    console.log('     - Solo ver sus propios tratamientos y citas')
    console.log('     - Acceso de solo lectura a su informaci√≥n m√©dica')
    console.log('')
    console.log('   üë©‚Äç‚öïÔ∏è DOCTOR FICHAS:')
    console.log('     - Gesti√≥n completa de fichas m√©dicas')
    console.log('     - Sin acceso a atenci√≥n de pacientes')
    console.log('')
    console.log('   üë®‚Äç‚öïÔ∏è DOCTOR GENERAL y ü¶∑ ODONT√ìLOGA:')
    console.log('     - Gesti√≥n completa de fichas m√©dicas')
    console.log('     - Atenci√≥n y seguimiento de pacientes')
    console.log('     - Gesti√≥n de tratamientos y citas')
    console.log('     - Env√≠o de notificaciones m√©dicas')
    console.log('')
    console.log('   üë§ ADMINISTRADOR:')
    console.log('     - Acceso total al sistema')
    console.log('     - Todos los permisos de doctores')
    console.log('     - Gesti√≥n b√°sica de usuarios')

    console.log('\n‚ú® ¬°Listo para comenzar el desarrollo!')
  } catch (error) {
    console.error('‚ùå Error durante el seeding:', error)
    throw error
  }
}

// ========================================
// EJECUTAR EL SEEDER
// ========================================
main()
  .then(async () => {
    await prisma.$disconnect()
    console.log('\nüîå Conexi√≥n a base de datos cerrada correctamente')
  })
  .catch(async error => {
    console.error('üí• Error fatal:', error)
    await prisma.$disconnect()
    process.exit(1)
  })

// ========================================
// NOTAS PARA DESARROLLO
// ========================================

/*
üîÑ PR√ìXIMOS PASOS PARA EXPANDIR:

1. Cuando necesites m√°s funcionalidades administrativas, puedes agregar al rol ADMINISTRADOR:
   - Gesti√≥n de roles y permisos
   - Registro de doctores
   - Gesti√≥n de turnos y disponibilidades
   - Gesti√≥n de vacunas

2. Para agregar nuevos tipos de usuarios, usa este template:

const USUARIO_NUEVO: UsuarioCompleto = {
  persona: { ... },
  usuario: { ... },
  datosEspecificos: { ... },
  rol: {
    nombre: 'NUEVO_ROL',
    descripcion: 'Descripci√≥n',
    permisos: [
      ...PERMISOS_COMUNES,
      // Agregar permisos espec√≠ficos
    ]
  }
}

3. Recuerda que los roles se reutilizan autom√°ticamente, as√≠ que puedes
   tener m√∫ltiples usuarios con el mismo rol sin duplicar permisos.

üéØ ESTRUCTURA ACTUAL:
- PACIENTE: Solo lectura de su informaci√≥n m√©dica
- DOCTOR_FICHAS: Solo gesti√≥n de fichas
- DOCTOR_GENERAL: Fichas + atenci√≥n completa de pacientes
- ADMINISTRADOR: Acceso total + gesti√≥n b√°sica de usuarios
*/
